;; virai-theme.el ---
;;
;; Author: Minae Yui <minae.yui.sain@gmail.com>
;; Version: 0.1
;; URL: 
;; Keywords:
;; Compatibility:
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Commentary:
;; .
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; This program is free software; you can redistribute it and/or
;; modify it under the terms of the GNU General Public License as
;; published by the Free Software Foundation; either version 2, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;; General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with this program; see the file COPYING.  If not, write to
;; the Free Software Foundation, Inc., 51 Franklin Street, Fifth
;; Floor, Boston, MA 02110-1301, USA.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;; Code:
(let* ((white        "#FFFFFF")
       (black        "#000000")
       (gray1        "gray1")
       (gray2        "gray2")
       (gray4        "gray4")
       (gray6        "gray6")
       (gray8        "gray8")
       (gray10       "gray10")
       (gray20       "gray20")
       (gray24       "gray24")
       (gray28       "gray28")
       (gray40       "gray40")
       (gray44       "gray44")
       (gray60       "gray60")
       (gray80       "gray80")

       (magenta      "#BD007B")
       (violet       "#6F04C1")
       (violet-blue  "#3D0CA0")
       (blue         "#51afef")
       (cyan         "#46D9FF")
       (dark-cyan    "#008C8C")
       (teal         "#4DB5BD")
       (green        "#4ACA1A")
       (chartreuse   "#BFF300")
       (yellow       "#F9E025")
       (orange       "#FF8119")
       (red          "#FF2D27"))
  (let ((color-bg-1      black)
        (color-bg-2      gray20)
        (color-bg-3      gray40)
        (color-bg-4      gray60)
        (color-bg-5      gray80)
        (color-bg-6      white)

        (color-fg-1      white)
        (color-fg-2      gray60)
        (color-fg-3      gray40)
        (color-fg-4      gray20)
        (color-fg-5      gray10)
        (color-fg-6      black)

        (color-action-1  violet)
        (color-ok        green)
        (color-error     red)
        (color-warning   orange)

        (color-builtin   white)
        (color-variable  white)
        (color-comment   gray60)
        (color-doc       chartreuse)
        (color-string    chartreuse)
        (color-function  orange)
        (color-constant  dark-cyan)
        (color-keyword   dark-cyan)
        (color-type      dark-cyan)
        (color-operator  cyan)

        (color-rainbow-delimiters-1  dark-cyan)
        (color-rainbow-delimiters-2  dark-cyan)
        (color-rainbow-delimiters-3  dark-cyan)
        (color-rainbow-delimiters-4  dark-cyan)
        (color-rainbow-delimiters-5  dark-cyan)
        (color-rainbow-delimiters-6  dark-cyan)
        (color-rainbow-delimiters-7  dark-cyan)
        (color-rainbow-delimiters-8  dark-cyan)
        (color-rainbow-delimiters-9  dark-cyan)
        (color-rainbow-delimiters-10 dark-cyan)
        (color-rainbow-delimiters-11 dark-cyan)
        (color-rainbow-delimiters-12 dark-cyan)
        (color-rainbow-delimiters-13 dark-cyan)
        (color-rainbow-delimiters-14 dark-cyan)
        (color-rainbow-delimiters-15 dark-cyan)
        (color-rainbow-delimiters-16 dark-cyan)
        (color-rainbow-delimiters-17 dark-cyan)
        (color-rainbow-delimiters-18 dark-cyan)
        (color-rainbow-delimiters-19 dark-cyan)
        (color-rainbow-delimiters-20 dark-cyan)
        )
    (deftheme virai "Virai theme")
    (custom-theme-set-faces 'virai
      ;; default
      `(default ((t (:background ,color-bg-1 :foreground ,color-fg-1))))
      `(bold ((t nil)))
      `(bold-italic ((t (:slant italic))))
      `(button ((t (:box (:line-width 3 :color ,color-bg-2 :style released-button)))))
      `(cursor ((t nil)))
      `(error ((t (:foreground ,color-fg-1))))
      `(escape-glyph ((t nil)))
      `(fixed-pitch ((t nil)))
      `(fixed-pitch-serif ((t nil)))
      `(fringe ((t nil)))
      `(glyphless-char ((t nil)))
      `(header-line ((t nil)))
      `(highlight ((t nil)))
      `(isearch ((t nil)))
      `(lazy-highlight ((t nil)))
      `(link ((t (:underline t))))
      `(link-visited ((t (:inherit link :foreground ,color-fg-2))))
      `(match ((t nil)))
      `(minibuffer-prompt ((t nil)))
      `(mode-line-buffer-id ((t nil)))
      `(mode-line-emphasis ((t nil)))
      `(mode-line-highlight ((t nil)))
      `(mode-line-inactive ((t (:inherit mode-line))))
      `(nobreak-space ((t nil)))
      `(region ((t (:background ,color-bg-2))))
      `(secondary-selection ((t nil)))
      `(shadow ((t nil)))
      `(success ((t nil)))
      `(tool-bar ((t nil)))
      `(tooltip ((t nil)))
      `(trailing-whitespace ((t nil)))
      `(tty-menu-disabled-face ((t nil)))
      `(tty-menu-enabled-face ((t nil)))
      `(tty-menu-selected-face ((t nil)))
      `(variable-pitch ((t nil)))
      `(warning ((t (:foreground ,color-warning))))
      `(window-divider ((t nil)))
      `(window-divider-first-pixel ((t nil)))
      `(window-divider-last-pixel ((t nil)))

      ;; customize faces
      `(custom-button ((t (:box (:line-width 2 :style released-button)))))
      `(custom-button-mouse ((t (:box (:line-width 2 :style released-button)))))
      `(custom-button-pressed ((t (:box (:line-width 1 :style pressed-button)))))
      `(custom-button-pressed-unraised ((t nil)))
      `(custom-button-unraised ((t nil)))
      `(custom-comment ((t nil)))
      `(custom-comment-tag ((t nil)))
      `(custom-face-tag ((t (:slant italic))))
      `(custom-group-subtitle ((t nil)))
      `(custom-group-tag ((t (:slant italic :height 1.2))))
      `(custom-group-tag-1 ((t nil)))
      `(custom-link ((t (:underline t))))
      `(custom-state ((t nil)))
      `(custom-variable-button ((t (:underline t))))
      `(custom-variable-tag ((t (:slant italic))))
      `(custom-visibility ((t (:underline t))))

      ;; font-lock faces
      `(font-lock-builtin-face              ((t (:foreground ,color-builtin))))
      `(font-lock-constant-face             ((t (:foreground ,color-constant))))
      `(font-lock-function-name-face        ((t (:foreground ,color-function))))
      `(font-lock-keyword-face              ((t (:foreground ,color-keyword))))
      `(font-lock-string-face               ((t (:foreground ,color-string))))
      `(font-lock-type-face                 ((t (:foreground ,color-type))))
      `(font-lock-variable-name-face        ((t (:foreground ,color-variable))))
      `(font-lock-comment-face              ((t (:foreground ,color-comment))))
      `(font-lock-comment-delimiter-face    ((t (:inherit 'font-lock-comment-face))))
      `(font-lock-doc-face                  ((t (:inherit 'font-lock-comment-face :foreground ,color-doc))))
      `(font-lock-warning-face              ((t (:inherit 'warning))))
      `(font-lock-negation-char-face        ((t (:inherit 'bold :foreground ,color-operator))))
      `(font-lock-preprocessor-face         ((t (:inherit 'bold :foreground ,color-operator))))
      `(font-lock-preprocessor-char-face    ((t (:inherit 'bold :foreground ,color-operator))))
      `(font-lock-regexp-grouping-backslash ((t (:inherit 'bold :foreground ,color-operator))))
      `(font-lock-regexp-grouping-construct ((t (:inherit 'bold :foreground ,color-operator))))

      ;; linum
      `(linum ((t (:background ,color-bg-1 :foreground ,color-fg-1))))
      `(linum-relative-current-face ((t (:background ,color-bg-2 :foreground ,color-fg-1))))

      ;; dired
      `(dired-directory ((t nil)))
      `(dired-flagged ((t nil)))
      `(dired-header ((t nil)))
      `(dired-ignored ((t nil)))
      `(dired-mark ((t nil)))
      `(dired-marked ((t nil)))
      `(dired-perm-write ((t nil)))
      `(dired-symlink ((t nil)))
      `(dired-warning ((t nil)))

      ;; git
      `(git-commit-comment-action ((t nil)))
      `(git-commit-comment-branch-local ((t nil)))
      `(git-commit-comment-branch-remote ((t nil)))
      `(git-commit-comment-detached ((t nil)))
      `(git-commit-comment-file ((t nil)))
      `(git-commit-comment-heading ((t nil)))
      `(git-commit-known-pseudo-header ((t nil)))
      `(git-commit-nonempty-second-line ((t nil)))
      `(git-commit-note ((t nil)))
      `(git-commit-overlong-summary ((t nil)))
      `(git-commit-pseudo-header ((t nil)))
      `(git-commit-summary ((t nil)))
      `(git-rebase-comment-hash ((t nil)))
      `(git-rebase-comment-heading ((t nil)))
      `(git-rebase-hash ((t nil)))
      `(git-rebase-killed-action ((t nil)))

      ;; helm
      `(helm-M-x-key ((t nil)))
      `(helm-action ((t nil)))
      `(helm-buffer-directory ((t nil)))
      `(helm-buffer-file ((t nil)))
      `(helm-buffer-modified ((t nil)))
      `(helm-buffer-not-saved ((t nil)))
      `(helm-buffer-process ((t nil)))
      `(helm-buffer-saved-out ((t nil)))
      `(helm-buffer-size ((t nil)))
      `(helm-candidate-number ((t nil)))
      `(helm-candidate-number-suspended ((t nil)))
      `(helm-etags-file ((t nil)))
      `(helm-ff-directory ((t nil)))
      `(helm-ff-dirs ((t nil)))
      `(helm-ff-dotted-directory ((t nil)))
      `(helm-ff-dotted-symlink-directory ((t nil)))
      `(helm-ff-executable ((t nil)))
      `(helm-ff-file ((t nil)))
      `(helm-ff-invalid-symlink ((t nil)))
      `(helm-ff-prefix ((t nil)))
      `(helm-ff-symlink ((t nil)))
      `(helm-grep-cmd-line ((t nil)))
      `(helm-grep-file ((t nil)))
      `(helm-grep-finish ((t nil)))
      `(helm-grep-lineno ((t nil)))
      `(helm-grep-match ((t nil)))
      `(helm-header ((t nil)))
      `(helm-header-line-left-margin ((t nil)))
      `(helm-history-deleted ((t nil)))
      `(helm-history-remote ((t nil)))
      `(helm-lisp-completion-info ((t nil)))
      `(helm-lisp-show-completion ((t nil)))
      `(helm-match ((t nil)))
      `(helm-match-item ((t nil)))
      `(helm-non-file-buffer ((t nil)))
      `(helm-prefarg ((t nil)))
      `(helm-selection-line ((t nil)))
      `(helm-separator ((t nil)))
      `(helm-source-header ((t nil)))
      `(helm-visible-mark ((t nil)))
      `(helm-locate-finish ((t nil)))
      `(helm-moccur-buffer ((t nil)))
      `(helm-resume-need-update ((t nil)))
      `(helm-selection ((t (:background ,color-bg-2))))

      ;; ivy
      `(ivy-action ((t nil)))
      `(ivy-confirm-face ((t nil)))
      `(ivy-current-match ((t nil)))
      `(ivy-cursor ((t nil)))
      `(ivy-highlight-face ((t nil)))
      `(ivy-match-required-face ((t nil)))
      `(ivy-minibuffer-match-face-1 ((t nil)))
      `(ivy-minibuffer-match-face-2 ((t nil)))
      `(ivy-minibuffer-match-face-3 ((t nil)))
      `(ivy-minibuffer-match-face-4 ((t nil)))
      `(ivy-minibuffer-match-highlight ((t nil)))
      `(ivy-modified-buffer ((t nil)))
      `(ivy-prompt-match ((t nil)))
      `(ivy-remote ((t nil)))
      `(ivy-subdir ((t nil)))
      `(ivy-virtual ((t nil)))

      ;; markdown
      `(markdown-blockquote-face ((t nil)))
      `(markdown-bold-face ((t nil)))
      `(markdown-code-face ((t nil)))
      `(markdown-comment-face ((t nil)))
      `(markdown-footnote-marker-face ((t nil)))
      `(markdown-footnote-text-face ((t nil)))
      `(markdown-gfm-checkbox-face ((t nil)))
      `(markdown-header-delimiter-face ((t nil)))
      `(markdown-header-face ((t nil)))
      `(markdown-header-face-1 ((t nil)))
      `(markdown-header-face-2 ((t nil)))
      `(markdown-header-face-3 ((t nil)))
      `(markdown-header-face-4 ((t nil)))
      `(markdown-header-face-5 ((t nil)))
      `(markdown-header-face-6 ((t nil)))
      `(markdown-header-rule-face ((t nil)))
      `(markdown-highlight-face ((t nil)))
      `(markdown-hr-face ((t nil)))
      `(markdown-html-attr-name-face ((t nil)))
      `(markdown-html-attr-value-face ((t nil)))
      `(markdown-html-entity-face ((t nil)))
      `(markdown-html-tag-delimiter-face ((t nil)))
      `(markdown-html-tag-name-face ((t nil)))
      `(markdown-inline-code-face ((t nil)))
      `(markdown-italic-face ((t nil)))
      `(markdown-language-info-face ((t nil)))
      `(markdown-language-keyword-face ((t nil)))
      `(markdown-line-break-face ((t nil)))
      `(markdown-link-face ((t nil)))
      `(markdown-link-title-face ((t nil)))
      `(markdown-list-face ((t nil)))
      `(markdown-markup-face ((t nil)))
      `(markdown-math-face ((t nil)))
      `(markdown-metadata-key-face ((t nil)))
      `(markdown-metadata-value-face ((t nil)))
      `(markdown-missing-link-face ((t nil)))
      `(markdown-plain-url-face ((t nil)))
      `(markdown-pre-face ((t nil)))
      `(markdown-reference-face ((t nil)))
      `(markdown-strike-through-face ((t nil)))
      `(markdown-table-face ((t nil)))
      `(markdown-url-face ((t nil)))

      ;; company-mode
      `(company-echo ((t nil)) t)
      `(company-echo-common ((t nil)))
      `(company-preview ((t nil)))
      `(company-preview-common ((t nil)))
      `(company-preview-search ((t nil)))
      `(company-scrollbar-bg ((t nil)))
      `(company-scrollbar-fg ((t nil)))
      `(company-template-field ((t nil)))
      `(company-tooltip ((t nil)))
      `(company-tooltip-annotation ((t nil)))
      `(company-tooltip-annotation-selection ((t nil)))
      `(company-tooltip-common ((t nil)))
      `(company-tooltip-common-selection ((t nil)))
      `(company-tooltip-mouse ((t nil)))
      `(company-tooltip-selection ((t (:background ,color-bg-2))))

      ;; auto-complete
      `(ac-candidate-face ((t nil)))
      `(ac-candidate-mouse-face ((t nil)))
      `(ac-completion-face ((t (:background ,color-fg-2))))
      `(ac-selection-face ((t (:background ,color-bg-2))))

      ;; ace jump
      `(ace-jump-face-background ((t nil)))
      `(ace-jump-face-foreground ((t (:foreground ,color-action-1))))

      ;; highlight-symbol
      `(highlight-symbol-face ((t (:background ,color-bg-2))))

      ;; mode-line
      `(mode-line ((t (:background ,gray1 :foreground ,gray2))))

      ;; powerline
      `(powerline-active1   ((t (:background ,gray4 :foreground ,gray40))))
      `(powerline-active2   ((t (:background ,gray8 :foreground ,gray44))))
      `(powerline-inactive1 ((t (:background ,gray1 :foreground ,gray24))))
      `(powerline-inactive2 ((t (:background ,gray2 :foreground ,gray28))))

      ;; rainbow delimiters
      `(rainbow-delimiters-depth-1-face  ((t (:foreground ,color-rainbow-delimiters-1))))
      `(rainbow-delimiters-depth-2-face  ((t (:foreground ,color-rainbow-delimiters-2))))
      `(rainbow-delimiters-depth-3-face  ((t (:foreground ,color-rainbow-delimiters-3))))
      `(rainbow-delimiters-depth-4-face  ((t (:foreground ,color-rainbow-delimiters-4))))
      `(rainbow-delimiters-depth-5-face  ((t (:foreground ,color-rainbow-delimiters-5))))
      `(rainbow-delimiters-depth-6-face  ((t (:foreground ,color-rainbow-delimiters-6))))
      `(rainbow-delimiters-depth-7-face  ((t (:foreground ,color-rainbow-delimiters-7))))
      `(rainbow-delimiters-depth-8-face  ((t (:foreground ,color-rainbow-delimiters-8))))
      `(rainbow-delimiters-depth-9-face  ((t (:foreground ,color-rainbow-delimiters-9))))
      `(rainbow-delimiters-depth-10-face ((t (:foreground ,color-rainbow-delimiters-10))))
      `(rainbow-delimiters-depth-11-face ((t (:foreground ,color-rainbow-delimiters-11))))
      `(rainbow-delimiters-depth-12-face ((t (:foreground ,color-rainbow-delimiters-12))))
      `(rainbow-delimiters-depth-13-face ((t (:foreground ,color-rainbow-delimiters-13))))
      `(rainbow-delimiters-depth-14-face ((t (:foreground ,color-rainbow-delimiters-14))))
      `(rainbow-delimiters-depth-15-face ((t (:foreground ,color-rainbow-delimiters-15))))
      `(rainbow-delimiters-depth-16-face ((t (:foreground ,color-rainbow-delimiters-16))))
      `(rainbow-delimiters-depth-17-face ((t (:foreground ,color-rainbow-delimiters-17))))
      `(rainbow-delimiters-depth-18-face ((t (:foreground ,color-rainbow-delimiters-18))))
      `(rainbow-delimiters-depth-19-face ((t (:foreground ,color-rainbow-delimiters-19))))
      `(rainbow-delimiters-depth-20-face ((t (:foreground ,color-rainbow-delimiters-20)))))

    (custom-theme-set-variables 'virai
      ;; beacon
      `(beacon-color ,color-action-1)))
  )

(provide-theme 'virai)
;;; virai-theme.el ends here

;; Local Variables:
;; eval: (put 'custom-theme-set-faces     'lisp-indent-function 'defun)
;; eval: (put 'custom-theme-set-variables 'lisp-indent-function 'defun)
;; End:
